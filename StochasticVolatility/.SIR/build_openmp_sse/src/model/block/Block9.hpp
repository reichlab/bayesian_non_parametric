




/**
 * @file
 *
 * @author Generated by LibBi
 * $Rev$
 * $Date$
 */
#ifndef LIBBI_BLOCK9_HPP
#define LIBBI_BLOCK9_HPP

#include "../action/Action8.hpp"
#include "../action/Action9.hpp"
#include "../action/Action10.hpp"

#include "bi/typelist/macro_typelist.hpp"
#include "bi/traits/block_traits.hpp"

#include "boost/typeof/typeof.hpp"

/**
 * Type tree for actions.
 */
BEGIN_TYPETREE(Block9ActionTypeList)
BEGIN_NODE(1)
BEGIN_NODE(1)
LEAF_NODE(1, Action8)
JOIN_NODE
LEAF_NODE(1, Action9)
END_NODE
JOIN_NODE
LEAF_NODE(1, Action10)
END_NODE

END_TYPETREE()


/**
 * Block: ode.
 */
class Block9 {
public:
  
  /**
   * Type list for actions.
   */
  typedef GET_TYPETREE(Block9ActionTypeList) action_typelist;


  
  
  template<class T1, bi::Location L>
  static void simulates(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s);
  

  
  
  template<class T1, bi::Location L>
  static void samples(bi::Random& rng, const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s);
  

  
  
  template<class T1, bi::Location L, class V1>
  static void logDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s, V1 lp);
  

  
  
  template<class T1, bi::Location L, class V1>
  static void maxLogDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s, V1 lp);
  

  
private:
  /**
   * Algorithms.
   */
  enum Algorithm {
    RK4,
    RK43,
    DOPRI5
  };
};

#include "bi/ode/RK4Integrator.hpp"
#include "bi/ode/DOPRI5Integrator.hpp"
#include "bi/ode/RK43Integrator.hpp"
#include "bi/ode/IntegratorConstants.hpp"


  
  template<class T1, bi::Location L>
  void Block9::simulates(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s)
  
 {
  /* initialise integrator */
  static const real ATOLER = 0.01;
  static const real RTOLER = 1e-05;
  static const real H = 0.1;
  bi_ode_set(H, ATOLER, RTOLER);

  /* integrate */  
  
  bi::RK43Integrator<ModelSIR,action_typelist>::update(t1, t2, s);
  
}


  
  template<class T1, bi::Location L>
  void Block9::samples(bi::Random& rng, const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s)
  
 {
  simulates(t1, t2, onDelta, s);
}


  
  template<class T1, bi::Location L, class V1>
  void Block9::logDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s, V1 lp)
  
 {
  simulates(t1, t2, onDelta, s);
}


  
  template<class T1, bi::Location L, class V1>
  void Block9::maxLogDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s, V1 lp)
  
 {
  simulates(t1, t2, onDelta, s);
}


#endif
