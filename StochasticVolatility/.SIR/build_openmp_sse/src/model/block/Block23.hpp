




/**
 * @file
 *
 * @author Generated by LibBi
 * $Rev$
 * $Date$
 */
#ifndef LIBBI_BLOCK23_HPP
#define LIBBI_BLOCK23_HPP

#include "../action/Action21.hpp"

#include "bi/typelist/macro_typelist.hpp"
#include "bi/traits/block_traits.hpp"

#include "boost/typeof/typeof.hpp"

/**
 * Type tree for actions.
 */
BEGIN_TYPETREE(Block23ActionTypeList)
LEAF_NODE(1, Action21)

END_TYPETREE()


/**
 * Block: wiener_.
 */
class Block23 {
public:
  
  /**
   * Type list for actions.
   */
  typedef GET_TYPETREE(Block23ActionTypeList) action_typelist;


  
  
  template<class T1, bi::Location L>
  static void simulates(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s);
  

  
  
  template<class T1, bi::Location L>
  static void samples(bi::Random& rng, const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s);
  

  
  
  template<class T1, bi::Location L, class V1>
  static void logDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s, V1 lp);
  

  
  
  template<class T1, bi::Location L, class V1>
  static void maxLogDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s, V1 lp);
  

};

#include "bi/updater/DynamicUpdater.hpp"
#include "bi/updater/DynamicSampler.hpp"
#include "bi/updater/DynamicLogDensity.hpp"
#include "bi/updater/DynamicMaxLogDensity.hpp"


  
  template<class T1, bi::Location L>
  void Block23::simulates(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s)
  
 {
  bi::DynamicUpdater<ModelSIR,action_typelist>::update(t1, t2, s);
}


  
  template<class T1, bi::Location L>
  void Block23::samples(bi::Random& rng, const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s)
  
 {
  bi::DynamicSampler<ModelSIR,action_typelist>::samples(rng, t1, t2, s);
}


  
  template<class T1, bi::Location L, class V1>
  void Block23::logDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s, V1 lp)
  
 {
  bi::DynamicLogDensity<ModelSIR,action_typelist>::logDensities(t1, t2, s, lp);
}


  
  template<class T1, bi::Location L, class V1>
  void Block23::maxLogDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s, V1 lp)
  
 {
  bi::DynamicMaxLogDensity<ModelSIR,action_typelist>::maxLogDensities(t1, t2, s, lp);
}


#endif
