





/**
 * @file
 *
 * Automatically generated by LibBi, do not edit.
 */
#ifndef LIBBI_ACTION6_HPP
#define LIBBI_ACTION6_HPP

#include "ActionCoord6.hpp"

#include "bi/state/State.hpp"
#include "bi/state/Mask.hpp"
#include "bi/cuda/cuda.hpp"
#include "bi/math/scalar.hpp"
#include "bi/math/constant.hpp"
#include "bi/math/function.hpp"
#ifdef ENABLE_SSE
#include "bi/sse/math/scalar.hpp"
#endif

class ModelSIR;

/**
 * Action: gaussian.
 */
class Action6 {
public:
  
  /**
   * Target type.
   */
  typedef Var6 target_type;

  /**
   * Coordinate type.
   */
  typedef ActionCoord6 coord_type;

  /**
   * Size of the action.
   */
  static const int SIZE = 1;

  /**
   * Is this a matrix action?
   */
  static const bool IS_MATRIX = 0;
  
  
  
  template <bi::Location L, class CX, class PX, class OX>
  static CUDA_FUNC_BOTH void simulates(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x);
  

  
  
  template <class R1, bi::Location L, class CX, class PX, class OX>
  static CUDA_FUNC_BOTH void samples(R1& rng, bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x);
  

  
  
  template <bi::Location L, class CX, class PX, class OX, class T1>
  static CUDA_FUNC_BOTH void logDensities(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp);
  

  
  
  template <bi::Location L, class CX, class PX, class OX, class T1>
  static CUDA_FUNC_BOTH void maxLogDensities(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp);
  

};

#include "bi/math/constant.hpp"


  
  
  template <bi::Location L, class CX, class PX, class OX>
  void Action6::simulates(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x)
  
 {
    
    
    
  
  /* variables */
  
  
  const BOOST_AUTO(I__, pax.template fetch<Var4>(s, p, 0));
  
  const BOOST_AUTO(y__, pax.template fetch<Var6>(s, p, 0));
  /* inlines */
  
    const CX& cox_ = cox;
    x.template fetch<target_type>(s, p, cox_.index()) = pax.template fetch_alt<target_type>(s, p, cox_.index());
    
  }



  
  template <class R1, bi::Location L, class CX, class PX, class OX>
  void Action6::samples(R1& rng, bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x)
  
 {
  
  
  
  /* variables */
  
  
  const BOOST_AUTO(I__, pax.template fetch<Var4>(s, p, 0));
  
  const BOOST_AUTO(y__, pax.template fetch<Var6>(s, p, 0));
  /* inlines */
  
  const CX& cox_ = cox;

  real mu = I__;
  real sigma = BI_REAL(1000);
  
  real u = rng.gaussian(mu, sigma);
  

  x.template fetch<target_type>(s, p, cox_.index()) = u;
}


  
  template <bi::Location L, class CX, class PX, class OX, class T1>
  void Action6::logDensities(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp)
  
 {
  
  
  
  /* variables */
  
  
  const BOOST_AUTO(I__, pax.template fetch<Var4>(s, p, 0));
  
  const BOOST_AUTO(y__, pax.template fetch<Var6>(s, p, 0));
  /* inlines */
  
  const CX& cox_ = cox;

  real mu = I__;
  real sigma = BI_REAL(1000);
  
  real xy = pax.template fetch_alt<target_type>(s, p, cox_.index());

  
  lp += BI_REAL(-0.5)*bi::pow((xy - mu)/sigma, BI_REAL(2.0)) - BI_REAL(BI_HALF_LOG_TWO_PI) - bi::log(sigma);
  

  x.template fetch<target_type>(s, p, cox_.index()) = xy;
}


  
  template <bi::Location L, class CX, class PX, class OX, class T1>
  void Action6::maxLogDensities(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp)
  
 {
  
  
  
  /* variables */
  
  
  const BOOST_AUTO(I__, pax.template fetch<Var4>(s, p, 0));
  
  const BOOST_AUTO(y__, pax.template fetch<Var6>(s, p, 0));
  /* inlines */
  
  const CX& cox_ = cox;

  real sigma = BI_REAL(1000);

  real xy = pax.template fetch_alt<target_type>(s, p, cox_.index());
  
  
  
  lp += -BI_REAL(BI_HALF_LOG_TWO_PI) - bi::log(sigma);
  
  
  
  x.template fetch<target_type>(s, p, cox_.index()) = xy;
}


#endif
