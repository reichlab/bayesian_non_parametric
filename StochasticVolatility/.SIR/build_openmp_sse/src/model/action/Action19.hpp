







/**
 * @file
 *
 * Automatically generated by LibBi, do not edit.
 */
#ifndef LIBBI_ACTION19_HPP
#define LIBBI_ACTION19_HPP

#include "ActionCoord19.hpp"

#include "bi/state/State.hpp"
#include "bi/state/Mask.hpp"
#include "bi/cuda/cuda.hpp"
#include "bi/math/scalar.hpp"
#include "bi/math/constant.hpp"
#include "bi/math/function.hpp"
#ifdef ENABLE_SSE
#include "bi/sse/math/scalar.hpp"
#endif

class ModelSIR;

#include "bi/random/generic.hpp"

/**
 * Action: truncated_gaussian.
 */
class Action19 {
public:
  
  /**
   * Target type.
   */
  typedef Var11 target_type;

  /**
   * Coordinate type.
   */
  typedef ActionCoord19 coord_type;

  /**
   * Size of the action.
   */
  static const int SIZE = 1;

  /**
   * Is this a matrix action?
   */
  static const bool IS_MATRIX = 0;
  
  
  
  template <bi::Location L, class CX, class PX, class OX>
  static CUDA_FUNC_BOTH void simulates(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x);
  

  
  
  template <class R1, bi::Location L, class CX, class PX, class OX>
  static CUDA_FUNC_BOTH void samples(R1& rng, bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x);
  

  
  
  template <bi::Location L, class CX, class PX, class OX, class T1>
  static CUDA_FUNC_BOTH void logDensities(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp);
  

  
  
  template <bi::Location L, class CX, class PX, class OX, class T1>
  static CUDA_FUNC_BOTH void maxLogDensities(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp);
  

};


  
  
  template <bi::Location L, class CX, class PX, class OX>
  void Action19::simulates(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x)
  
 {
    
    
    
  
  /* variables */
  
  
  const BOOST_AUTO(p_R0__, pax.template fetch<Var11>(s, p, 0));
  
  const BOOST_AUTO(p_rep__, pax.template fetch<Var10>(s, p, 0));
  /* inlines */
  
  const BOOST_AUTO(_old_mean__, p_rep__);
  const BOOST_AUTO(_old_mean_diff__, (p_rep__ - _old_mean__));
    const CX& cox_ = cox;
    x.template fetch<target_type>(s, p, cox_.index()) = pax.template fetch_alt<target_type>(s, p, cox_.index());
    
  }



  
  template <class R1, bi::Location L, class CX, class PX, class OX>
  void Action19::samples(R1& rng, bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x)
  
 {
  
  
  
  /* variables */
  
  
  const BOOST_AUTO(p_R0__, pax.template fetch<Var11>(s, p, 0));
  
  const BOOST_AUTO(p_rep__, pax.template fetch<Var10>(s, p, 0));
  /* inlines */
  
  const BOOST_AUTO(_old_mean__, p_rep__);
  const BOOST_AUTO(_old_mean_diff__, (p_rep__ - _old_mean__));
  const CX& cox_ = cox;

  real mu = (p_R0__ + (BI_REAL(5.47399428332657)*_old_mean_diff__));
  real sigma = (BI_REAL(1)*BI_REAL(0.150151309758444));
  
  real mn = BI_REAL(1);
  real mx = BI_REAL(3);
  real u = truncated_gaussian(rng, mn, mx, mu, sigma);
  

  x.template fetch<target_type>(s, p, cox_.index()) = u;
}


  
  template <bi::Location L, class CX, class PX, class OX, class T1>
  void Action19::logDensities(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp)
  
 {
  
  
  
  /* variables */
  
  
  const BOOST_AUTO(p_R0__, pax.template fetch<Var11>(s, p, 0));
  
  const BOOST_AUTO(p_rep__, pax.template fetch<Var10>(s, p, 0));
  /* inlines */
  
  const BOOST_AUTO(_old_mean__, p_rep__);
  const BOOST_AUTO(_old_mean_diff__, (p_rep__ - _old_mean__));
  const CX& cox_ = cox;

  bool inside = true;

  real mu = (p_R0__ + (BI_REAL(5.47399428332657)*_old_mean_diff__));
  real sigma = (BI_REAL(1)*BI_REAL(0.150151309758444));

  
  real mx = BI_REAL(3);
  real Z = BI_REAL(0.5)*(BI_REAL(1.0) + bi::erf((mx - mu)/(BI_REAL(1.4142135623731)*sigma)));
  
  
  real mn = BI_REAL(1);
  Z -= BI_REAL(0.5)*(BI_REAL(1.0) + bi::erf((mn - mu)/(BI_REAL(1.4142135623731)*sigma)));
  
  
  real xy = pax.template fetch_alt<target_type>(s, p, cox_.index());

  
  inside = xy >= mn && xy <= mx;
  

  if (inside) {
    lp += BI_REAL(-0.5)*bi::pow((xy - mu)/sigma, BI_REAL(2.0)) - BI_REAL(BI_HALF_LOG_TWO_PI) - bi::log(sigma) - bi::log(Z);
  } else {
    lp = -BI_INF;
  }
  
  x.template fetch<target_type>(s, p, cox_.index()) = xy;
}


  
  template <bi::Location L, class CX, class PX, class OX, class T1>
  void Action19::maxLogDensities(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp)
  
 {
  
  
  
  /* variables */
  
  
  const BOOST_AUTO(p_R0__, pax.template fetch<Var11>(s, p, 0));
  
  const BOOST_AUTO(p_rep__, pax.template fetch<Var10>(s, p, 0));
  /* inlines */
  
  const BOOST_AUTO(_old_mean__, p_rep__);
  const BOOST_AUTO(_old_mean_diff__, (p_rep__ - _old_mean__));
  const CX& cox_ = cox;

  bool inside = true;

  real mu = (p_R0__ + (BI_REAL(5.47399428332657)*_old_mean_diff__));
  real sigma = (BI_REAL(1)*BI_REAL(0.150151309758444));

  
  real mx = BI_REAL(3);
  real Z = BI_REAL(0.5)*(BI_REAL(1.0) + bi::erf((mx - mu)/(BI_REAL(1.4142135623731)*sigma)));
  
  
  real mn = BI_REAL(1);
  Z -= BI_REAL(0.5)*(BI_REAL(1.0) + bi::erf((mn - mu)/(BI_REAL(1.4142135623731)*sigma)));
  
  
  real xy = pax.template fetch_alt<target_type>(s, p, cox_.index());

  
  
  if (mn <= mu && mu <= mx) {
  	lp += -BI_REAL(BI_HALF_LOG_TWO_PI) - bi::log(sigma) - bi::log(Z);
  } else {
    real x = (bi::abs(mn - mu) < bi::abs(mx - mu)) ? mn : mx;    
    lp += BI_REAL(-0.5)*bi::pow((x - mu)/sigma, BI_REAL(2.0)) - BI_REAL(BI_HALF_LOG_TWO_PI) - bi::log(sigma) - bi::log(Z);
  }
  
  

  x.template fetch<target_type>(s, p, cox_.index()) = xy;
}


#endif
