





/**
 * @file
 *
 * Automatically generated by LibBi, do not edit.
 */
#ifndef LIBBI_ACTION1_HPP
#define LIBBI_ACTION1_HPP

#include "ActionCoord1.hpp"

#include "bi/state/State.hpp"
#include "bi/state/Mask.hpp"
#include "bi/cuda/cuda.hpp"
#include "bi/math/scalar.hpp"
#include "bi/math/constant.hpp"
#include "bi/math/function.hpp"
#ifdef ENABLE_SSE
#include "bi/sse/math/scalar.hpp"
#endif

class ModelSIR;

/**
 * Action: uniform.
 */
class Action1 {
public:
  
  /**
   * Target type.
   */
  typedef Var11 target_type;

  /**
   * Coordinate type.
   */
  typedef ActionCoord1 coord_type;

  /**
   * Size of the action.
   */
  static const int SIZE = 1;

  /**
   * Is this a matrix action?
   */
  static const bool IS_MATRIX = 0;
    
  
  
  template <bi::Location L, class CX, class PX, class OX>
  static CUDA_FUNC_BOTH void simulates(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x);
  

  
  
  template <class R1, bi::Location L, class CX, class PX, class OX>
  static CUDA_FUNC_BOTH void samples(R1& rng, bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x);
  

  
  
  template <bi::Location L, class CX, class PX, class OX, class T1>
  static CUDA_FUNC_BOTH void logDensities(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp);
  

  
  
  template <bi::Location L, class CX, class PX, class OX, class T1>
  static CUDA_FUNC_BOTH void maxLogDensities(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp);
  

};

#include "bi/math/constant.hpp"


  
  
  template <bi::Location L, class CX, class PX, class OX>
  void Action1::simulates(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x)
  
 {
    
    
    
  
  /* variables */
  
  
  const BOOST_AUTO(p_R0__, pax.template fetch<Var11>(s, p, 0));
  /* inlines */
  
    const CX& cox_ = cox;
    x.template fetch<target_type>(s, p, cox_.index()) = pax.template fetch_alt<target_type>(s, p, cox_.index());
    
  }



  
  template <class R1, bi::Location L, class CX, class PX, class OX>
  void Action1::samples(R1& rng, bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x)
  
 {
  
  
  
  /* variables */
  
  
  const BOOST_AUTO(p_R0__, pax.template fetch<Var11>(s, p, 0));
  /* inlines */
  
  const CX& cox_ = cox;

  real mn = BI_REAL(13);
  real mx = BI_REAL(1);
  real u = rng.uniform(mn, mx);
    
  x.template fetch<target_type>(s, p, cox_.index()) = u;
}


  
  template <bi::Location L, class CX, class PX, class OX, class T1>
  void Action1::logDensities(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp)
  
 {
  
  
  
  /* variables */
  
  
  const BOOST_AUTO(p_R0__, pax.template fetch<Var11>(s, p, 0));
  /* inlines */
  
  const CX& cox_ = cox;

  real mn = BI_REAL(13);
  real mx = BI_REAL(1);
  
  real xy = pax.template fetch_alt<target_type>(s, p, cox_.index());

  if (xy >= mn && xy <= mx) {
    lp += -bi::log(mx - mn);
  } else {
    lp = -BI_INF;
  }
  x.template fetch<target_type>(s, p, cox_.index()) = xy;
}


  
  template <bi::Location L, class CX, class PX, class OX, class T1>
  void Action1::maxLogDensities(bi::State<ModelSIR,L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp)
  
 {
  
  
  
  /* variables */
  
  
  const BOOST_AUTO(p_R0__, pax.template fetch<Var11>(s, p, 0));
  /* inlines */
  
  const CX& cox_ = cox;

  real xy = pax.template fetch_alt<target_type>(s, p, cox_.index());
  
  
  real rn = (BI_REAL(1) - BI_REAL(13));
  lp += -bi::log(rn);
  

  x.template fetch<target_type>(s, p, cox_.index()) = xy;
}


#endif
