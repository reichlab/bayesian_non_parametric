





/**
 * @file
 *
 * @author Generated by LibBi
 * $Rev$
 * $Date$
 */
#ifndef LIBBI_BLOCK2_HPP
#define LIBBI_BLOCK2_HPP

#include "Block14.hpp"

#include "bi/typelist/macro_typelist.hpp"
#include "bi/traits/block_traits.hpp"

#include "boost/typeof/typeof.hpp"

/**
 * Type list of sub-blocks.
 */
BEGIN_TYPELIST(Block2BlockTypeList)
SINGLE_TYPE(1, Block14)
END_TYPELIST()

/**
 * Block: initial.
 */
class Block2 {
public:
  /**
   * Type list of sub-blocks.
   */
  typedef GET_TYPETREE(Block2BlockTypeList) block_typelist;
    
  
  
  template<bi::Location L>
  static void simulates(bi::State<ModelSIR,L>& s);
  

  
  
  template<bi::Location L>
  static void samples(bi::Random& rng, bi::State<ModelSIR,L>& s);
  

  
  
  template<bi::Location L, class V1>
  static void logDensities(bi::State<ModelSIR,L>& s, V1 lp);
  

  
  
  template<bi::Location L, class V1>
  static void maxLogDensities(bi::State<ModelSIR,L>& s, V1 lp);
  

};


  
  template<bi::Location L>
  void Block2::simulates(bi::State<ModelSIR,L>& s)
  
 {
  Block14::simulates(s);
}


  
  template<bi::Location L>
  void Block2::samples(bi::Random& rng, bi::State<ModelSIR,L>& s)
  
 {
  Block14::samples(rng, s);
}


  
  template<bi::Location L, class V1>
  void Block2::logDensities(bi::State<ModelSIR,L>& s, V1 lp)
  
 {
  Block14::logDensities(s, lp);
}


  
  template<bi::Location L, class V1>
  void Block2::maxLogDensities(bi::State<ModelSIR,L>& s, V1 lp)
  
 {
  Block14::maxLogDensities(s, lp);
}


#endif
