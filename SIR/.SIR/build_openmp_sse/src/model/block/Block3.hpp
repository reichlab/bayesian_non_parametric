





/**
 * @file
 *
 * @author Generated by LibBi
 * $Rev$
 * $Date$
 */
#ifndef LIBBI_BLOCK3_HPP
#define LIBBI_BLOCK3_HPP

#include "Block15.hpp"
#include "Block16.hpp"
#include "Block17.hpp"
#include "Block4.hpp"

#include "bi/typelist/macro_typelist.hpp"
#include "bi/traits/block_traits.hpp"

#include "boost/typeof/typeof.hpp"


/**
 * Type list of sub-blocks.
 */
BEGIN_TYPELIST(Block3BlockTypeList)
SINGLE_TYPE(1, Block15)
SINGLE_TYPE(1, Block16)
SINGLE_TYPE(1, Block17)
SINGLE_TYPE(1, Block4)
END_TYPELIST()

/**
 * Block: transition.
 */
class Block3 {
public:
  /**
   * Type list of sub-blocks.
   */
  typedef GET_TYPETREE(Block3BlockTypeList) block_typelist;

  
  
  template<class T1, bi::Location L>
  static void simulates(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s);
  

  
  
  template<class T1, bi::Location L>
  static void samples(bi::Random& rng, const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s);
  

  
  
  template<class T1, bi::Location L, class V1>
  static void logDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s, V1 lp);
  

  
  
  template<class T1, bi::Location L, class V1>
  static void maxLogDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s, V1 lp);
  

  
  /**
   * Time step.
   */
  static real getDelta();
};


inline real Block3::getDelta() {
  return 1;
}


  
  template<class T1, bi::Location L>
  void Block3::simulates(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s)
  
 {
  Block15::simulates(t1, t2, onDelta, s);
  Block16::simulates(t1, t2, onDelta, s);
  Block17::simulates(t1, t2, onDelta, s);
  Block4::simulates(t1, t2, onDelta, s);
}


  
  template<class T1, bi::Location L>
  void Block3::samples(bi::Random& rng, const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s)
  
 {
  Block15::samples(rng, t1, t2, onDelta, s);
  Block16::samples(rng, t1, t2, onDelta, s);
  Block17::samples(rng, t1, t2, onDelta, s);
  Block4::samples(rng, t1, t2, onDelta, s);
}


  
  template<class T1, bi::Location L, class V1>
  void Block3::logDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s, V1 lp)
  
 {
  Block15::logDensities(t1, t2, onDelta, s);
  Block16::logDensities(t1, t2, onDelta, s);
  Block17::logDensities(t1, t2, onDelta, s);
  Block4::logDensities(t1, t2, onDelta, s);
}


  
  template<class T1, bi::Location L, class V1>
  void Block3::maxLogDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<ModelSIR,L>& s, V1 lp)
  
 {
  Block15::maxLogDensities(t1, t2, onDelta, s);
  Block16::maxLogDensities(t1, t2, onDelta, s);
  Block17::maxLogDensities(t1, t2, onDelta, s);
  Block4::maxLogDensities(t1, t2, onDelta, s);
}
 


#endif

